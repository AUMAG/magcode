function torque_zy = cuboid_torque_z_y(size1, size2, offset, lever, J1, J2)
% cuboid_torque_z_y calculates the torque on a cuboid magnet in the presence 
% of another cuboid magnet, using theory described in Janssen 2011
% this code assumes magnet 1 is magnetised along the z-axis and magnet 2 is
% magnetised along the y-axis
% Inputs
% size1 = [a1; b1; c1] - half-dimensions of magnet 1 in x, y and z 
% directions
% size2 = [a2; b2; c2] - half-dimensions of magnet 2 in x, y and z 
% directions
% offset = [alpha; beta; gamma] - vector from centre of magnet 1 to centre 
% of magnet 2
% lever = [delta; epsilon; zeta] - vector from centre of magnet 1 to torque
% reference point
% J1 - flux density of magnet 1
% J2 - flux density of magnet 2
% Outputs
% torque_zy = [Tx; Ty; Tz] - torques on magnet 2 in x, y and z directions
% 6/12 Sean McGowan a1705690

% preallocate sums as rows of zero with the same length as the offset array
sumx = zeros([1 size(offset,2)]);
sumy = zeros([1 size(offset,2)]);
sumz = zeros([1 size(offset,2)]);

% remanent flux density
bzr1 = J1(3);
byr2 = J2(2);
% if the remanent flux densities along z axis for magnet 1 and y axis for
% magnet 2 are 0, torque will be 0
if bzr1==0 || byr2==0
  torque_zy = 0*offset;
  return
end

% calculate sums as described in Janssen, 2011
for i = 0:1
   for j = 0:1 
       for k = 0:1
           for l = 0:1
               for m = 0:1
                   for n = 0:1
                       
% calculate variables
Cu = ((-1)^i).*(size1(1))-lever(1, :);
Cv = ((-1)^k).*(size1(2))-lever(2, :);
Cw = ((-1)^m).*(size1(3))-lever(3, :);
u = offset(1, :)-((-1)^i).*(size1(1))+((-1)^j).*(size2(1));
v = offset(2, :)-((-1)^k).*(size1(2))+((-1)^l).*(size2(2));
w = offset(3, :)-((-1)^m).*(size1(3))+((-1)^n).*(size2(3));
r = sqrt(u.^2+v.^2+w.^2);

% find indexes where cuboid magnets align
a = (u==0)&(v==0);
b = (u==0)&(w==0);
c = (v==0)&(w==0);

% find indexes where cuboid magnets do not align
d = ~a&~b&~c;

% if magnets are aligned in any two directions, use the following limit
% expressions to calculate the sums
if any(a)
sumx(a) = sumx(a)+((-1)^(i+j+k+l+m+n)).*((1/24).*(3.*Cv.*(w(a).^2).*...
    log(w(a).^2)-2.*(3.*Cv.*(w(a).^2).*log(abs(w(a)))+3.*Cw.*...
    w(a).*(w(a)+2.*sqrt(w(a).^2))+4.*(w(a).^2).^(3/2))));
sumy(a) = sumy(a)+((-1)^(i+j+k+l+m+n)).*((-1/8).*w(a).*(Cu.*w(a).*...
    log(w(a).^2)-2.*(pi.*sqrt(w(a).^2).*Cw+Cu.*w(a).*log(abs(w(a))))));
sumz(a) = sumz(a)+((-1)^(i+j+k+l+m+n)).*((1/72).*(2.*w(a).*(w(a).^2+9.*...
    (2.*Cu-Cv.*pi).*sqrt(w(a).^2))-3.*(w(a).^3).*log(w(a).^2)));
end
if any(b)
sumx(b) = sumx(b)+((-1)^(i+j+k+l+m+n)).*((1/12).*v(b).*(-3.*Cw.*v(b)+...
    6.*Cw.*v(b).*log(abs(v(b)))+2.*sqrt(v(b).^2).*(3.*Cv+v(b))));
sumy(b) = sumy(b)+((-1)^(i+j+k+l+m+n)).*((1/24).*((v(b).^3).*...
    log(v(b).^2)-3.*(v(b).^3+4.*Cu.*sqrt(v(b).^2).*v(b))));
sumz(b) = sumz(b)+((-1)^(i+j+k+l+m+n)).*((1/4).*(Cu.*(v(b).^2).*...
    log(v(b).^2)));
end
if any(c)
sumx(c) = sumx(c)+((-1)^(i+j+k+l+m+n)).*((1/24).*(-4.*u(c).^3-6-6.*...
    Cw.*u(c).^2-3.*(u(c).^2).*(Cv-2.*Cw).*log(u(c).^2)+6.*...
    Cv.*log(abs(u(c))).*u(c).^2+4.*(u(c).^2).^(3/2)));
sumy(c) = sumy(c)+((-1)^(i+j+k+l+m+n)).*((1/72).*(u(c).^2).*(3.*(3.*...
    Cu+5.*u(c)).*log(u(c).^2)-2.*(5.*u(c)+9.*(Cu+u(c)).*...
    log(abs(u(c))))));
sumz(c) = sumz(c)+((-1)^(i+j+k+l+m+n)).*((-1/12).*(u(c).^2).*...
    (3.*Cu+2.*u(c)).*log(u(c).^2));
end

% if magnets are not aligned in two directions, use the following
% expressions to calculate the sums
sumx(d) = sumx(d)+((-1)^(i+j+k+l+m+n)).*((1/12).*(2.*r(d).*u(d).^2+3.*...
    u(d).*(v(d).^2+w(d).^2)-12.*u(d).*v(d).*(Cv+v(d)).*1/2.*...
    (log(abs(((u(d)./r(d))+1)./((u(d)./r(d))-1))))+2.*r(d).*(v(d).^2+...
    3.*Cv.*v(d)-2.*w(d).^2)-6.*u(d).*(v(d).^2+w(d).*(2.*Cw+w(d))).*...
    log(r(d)-u(d))-3.*Cw.*(u(d).^2-4.*u(d).*w(d)+v(d).^2+w(d).*(w(d)+2.*...
    r(d)))-2.*u(d).^3-6.*(Cv+v(d)).*(u(d).^2-w(d).^2).*1/2.*...
    (log(abs(((v(d)./r(d))+1)./((v(d)./r(d))-1))))-12.*(Cw.*(v(d).^2).*...
    1/2.*(log(abs(((w(d)./r(d))+1)./((w(d)./r(d))-1))))+u(d).*(Cw.*v(d).*...
    atan(w(d)./r(d))-(Cv+v(d)).*w(d).*atan((u(d).*v(d))./(w(d).*r(d)))+...
    Cw.*v(d).*atan((u(d).*w(d))./(v(d).*r(d)))))+6.*Cw.*(u(d).^2+...
    v(d).^2).*log(w(d)+r(d))));
sumy(d) = sumy(d)+((-1)^(i+j+k+l+m+n)).*((1/72).*(3.*(v(d).^3).*(2.*...
    log(v(d).^2+w(d).^2)+Cw.*atan((u(d).*w(d))./(v(d).*r(d))))+36.*...
    u(d).*v(d).*(2.*Cu+u(d)).*1/2.*(log(abs(((u(d)./r(d))+1)./...
    ((u(d)./r(d))-1))))-36.*Cu.*r(d).*v(d)-9.*v(d).*(8.*Cw.*u(d).*...
    (log(w(d)+r(d)))+w(d).^2+2.*w(d).*(4.*Cw+w(d)).*log(u(d)+r(d))+...
    u(d).^2-8.*Cw.*u(d))-30.*u(d).*r(d).*v(d)+36.*((u(d).^2).*(Cu+u(d))-...
    Cu.*(w(d).^2)).*1/2.*(log(abs(((v(d)./r(d))+1)./((v(d)./r(d))-1))))+...
    2.*(12.*(w(d).^2).*(3.*Cw+w(d)).*atan(u(d)./w(d))+18.*Cw.*(u(d).^2+...
    w(d).^2).*atan(w(d)./u(d))+6.*w(d).*(w(d).^2+3.*Cw.*w(d)-3.*u(d).*...
    (2.*Cu+u(d))).*atan((u(d).*v(d))./(w(d).*r(d)))+u(d).*(3.*(u(d).^2).*...
    log(u(d).^2+w(d).^2)-3.*(u(d).^2).*log(u(d).^2+w(d).^2+2.*v(d).*...
    (v(d)+r(d)))+18.*u(d).*Cw.*atan((v(d).*w(d))./(u(d).*r(d)))...
    -5.*u(d).^2-3.*w(d).*(18.*Cw+7.*w(d))+6.*(u(d).^2+3.*w(d).*...
    (2.*Cw+w(d))).*log(r(d)-v(d))))));
sumz(d) = sumz(d)+((-1)^(i+j+k+l+m+n)).*((1/36).*(6.*w(d).*(v(d).^2-...
    3.*u(d).*(2.*Cu+u(d)))+18.*u(d).*w(d).*(2.*Cu+u(d)).*...
    log(r(d)-u(d))+w(d).^3-3.*w(d).*(3.*v(d).^2+w(d).^2).*log(u(d)+...
    r(d))+3.*(6.*Cu+u(d)).*r(d).*w(d)-6.*v(d).*(v(d).^2-3.*u(d).*...
    (2.*Cu+u(d))).*atan(w(d)./r(d))+6.*v(d).*(v(d).^2+3.*u(d).*(2.*...
    Cu+u(d))).*atan((u(d).*w(d))./(v(d).*r(d)))-6.*(2.*u(d).^3+3.*...
    Cu.*(u(d).^2-v(d).^2)).*log(w(d)+r(d))-18.*(Cv+v(d)).*...
    ((atan(w(d)./u(d))+atan((v(d).*w(d))./(u(d).*r(d)))).*u(d).^2+...
    2.*v(d).*u(d)-2.*u(d).*v(d).*log(w(d)+r(d))-2.*(v(d).^2).*...
    atan((u(d)./v(d))+(v(d).^2).*atan((u(d).*w(d))./(v(d).*r(d)))-...
    3.*w(d).*u(d)+w(d).*(-2.*v(d).*log(u(d)+r(d))+2.*u(d).*...
    log(r(d)-v(d))+w(d).*(2.*atan(u(d)./w(d))+atan(w(d)./u(d))+...
    atan((u(d).*v(d))./(w(d).*r(d)))))))));
                   end
               end
           end
       end
   end
end

% permeability of free space
muo = 4*pi*10^-7;

% calculate torques from sums
torque_zy = ((bzr1*byr2)/(4*pi*muo)).*[sumx; sumy; sumz];
end