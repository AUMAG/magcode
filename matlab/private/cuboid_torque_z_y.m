%% cuboid_torque_z_y
%
% Calculate the forces between two parallel cuboid magnets,  magnetised in the
% z- and y-directions respectively.

% \START

function torque_zy = cuboid_torque_z_y(size1, size2, offset, lever, J1, J2)
% cuboid_torque_z_y calculates the torque on a cuboid magnet in the presence
% of another cuboid magnet, using theory described in Janssen 2011
% this code assumes magnet 1 is magnetised along the z-axis and magnet 2 is
% magnetised along the y-axis
% Inputs
% size1 = [a1; b1; c1] - half-dimensions of magnet 1 in x, y and z
% directions
% size2 = [a2; b2; c2] - half-dimensions of magnet 2 in x, y and z
% directions
% offset = [alpha; beta; gamma] - vector from centre of magnet 1 to centre
% of magnet 2
% lever = [delta; epsilon; zeta] - vector from centre of magnet 1 to torque
% reference point
% J1 - flux density of magnet 1
% J2 - flux density of magnet 2
% Outputs
% torque_zy = [Tx; Ty; Tz] - torques on magnet 2 in x, y and z directions
% 6/12 Sean McGowan a1705690


% remanent flux density
bzr1 = J1(3);
byr2 = J2(2);

% if the remanent flux densities along z axis for magnet 1 and y axis for
% magnet 2 are 0, torque will be 0
if abs(bzr1) < eps || abs(byr2) < eps
  torque_zy = zeros(size(offset));
  return
end

% preallocate sums as rows of zero with the same length as the offset array
Tx = zeros([1, size(offset,2)]);
Ty = Tx;
Tz = Tx;

E_nan = nan(size(Tx));

% calculate sums as described in Janssen, 2011
for ii = 0:1
  for jj = 0:1
    for kk = 0:1
      for ll = 0:1
        for mm = 0:1
          for nn = 0:1
            
            Ex = E_nan;
            Ey = E_nan;
            Ez = E_nan;

            Cu = ((-1)^ii).*(size1(1))-offset(1,:)-lever(1,:);
            Cv = ((-1)^kk).*(size1(2))-offset(2,:)-lever(2,:);
            Cw = ((-1)^mm).*(size1(3))-offset(3,:)-lever(3,:);
            
            u = offset(1,:)-((-1)^ii).*(size1(1))+((-1)^jj).*(size2(1));
            v = offset(2,:)-((-1)^kk).*(size1(2))+((-1)^ll).*(size2(2));
            w = offset(3,:)-((-1)^mm).*(size1(3))+((-1)^nn).*(size2(3));
            
            u2 = u.^2;
            v2 = v.^2;
            w2 = w.^2;
            r2 = u2+v2+w2;
            r = sqrt(r2);
            
            % find indexes where cuboid magnets align
            a = (u2<eps) & (v2<eps);
            b = (u2<eps) & (w2<eps);
            c = (v2<eps) & (w2<eps);
            
            % find indexes where cuboid magnets do not align
            d = ~a & ~b & ~c;
                        
            % if magnets are aligned in any two directions, use the following limit
            % expressions to calculate the sums
            
            if any(a)
              Ex(a) = -1/24.*w2(a).*(...
                + 6.*Cw(a).*(1+2.*sign(w(a))) + ...
                + 8.*abs(w(a))...
                                    );
              Ey(a) = pi/4.*w2(a).*sign(w(a)).*Cw(a);
              Ez(a) = 1/36.*w2(a).*(...
                + w(a) ...
                - 1.5.*w(a).*log(w2(a))...
                + 9.*(2.*Cu(a)-pi*Cv(a)).*sign(w(a)) ... 
                                   );
            end
            
            if any(b)
              Ex(b) = 1/12.*v2(b).*(...
                + 3.*Cw(b).*(log(v2(b))-1) + ...
                + 2.*sign(v(b)).*(3.*Cv(b)+v(b))...
                                  );
% Janssen (wrong?)
%               Ey(b) = 1/24.*v2(b).*(...
%                 + v(b).*( log(v2(b)) - 3 ) ...
%                 - 12.*Cu(b).*sign(v(b)) ...
%                             );
              Ey(b) = 1/24*(...
                +  3*v(b).^3 ...
                -  r(b).*v(b).*( 12*Cu(b)+10*u(b)+3*r(b)) ...
                + 2*v(b).*log(r(b)+u(b)).*(  3.*u(b).*(2*Cu(b)+u(b)) + v2(b) - 3*w(b).*(4.*Cw(b)+w(b)) ) ...
                + 2*v(b).*log(r(b)-u(b)).*( -3.*u(b).*(2*Cu(b)+u(b)) + v2(b) ) ...
                              );
                          
              Ez(b) = 1/4.*Cu(b).*v2(b).*log(v2(b));
            end
            
            if any(c)
% Janssen (wrong?)
%               Ex(c) = 1/12.*u2(c).*(...
%                 + 2.*u(c).*(sign(u(c))-1) ...
%                 + 3.*Cw(c).*(log(u2(c))-1) ...
%                             );
              Ex(c) = ...
                + 1/12.*r(c).*( 2*r2(c) - 3.*Cw(c).*r(c) + 6.*Cv(c).*v(c) - 6.*Cw(c).*w(c) - 6.*w2(c) ) ...
                 + 1/2.*Cw(c).*(u2(c).*log(r(c)+w(c)) + v2(c).*log(r(c)-w(c)))...
                            ;
              Ey(c) = 1/36.*u(c).^3.*(3*log(u2(c)) - 5);
              Ez(c) = -1/12.*( 3*Cu(c) + 2*u(c) ).*u2(c).*log(u2(c));
            end
            
            % if magnets are not aligned in two directions, use the following
            % expressions to calculate the sums
            
            if any(d)
              Ex(d) = (...
                  +1/12*r(d).*( 2*r2(d) + 6.*Cv(d).*v(d) - 6.*w2(d) - 6*Cw(d).*w(d) - 3*Cw(d).*r(d) ) ...
                  ...
                  -1/2*log(r(d)-u(d)).*u(d).*(2.*w(d).*Cw(d)+r2(d)-u2(d)) ...
                  +1/2*log(r(d)-w(d)).*Cw(d).*(r2(d)-w2(d)) ...
                  ...
                  -    acoth(r(d)./u(d)).*u(d).*v(d).*(Cv(d)+v(d)) ...
                  -1/2*acoth(r(d)./v(d)).*(Cv(d)+v(d)).*(u2(d)-w2(d)) ...
                  +    acoth(r(d)./w(d)).*Cw(d).*u2(d) ...
                  ...
                  +u(d).*w(d).*Cv(d).*atan(u(d).*v(d)./(w(d).*r(d))) ...
                  -u(d).*v(d).*Cw(d).*atan(u(d).*w(d)./(v(d).*r(d)))...
                  ...
                  +u(d).*v(d).*w(d).*atan(u(d).*v(d)./(w(d).*r(d))) ...
                  -u(d).*v(d).*Cw(d).*atan(w(d)./r(d))...
                );
              Ey(d) = 1/72*(...
                - 10*u(d).^3 ...
                +  9*v(d).^3 ...
...                -  6*u(d).*w(d).*(18*Cw(d)+7*w(d)) ...
                -  3*r(d).*v(d).*( 12*Cu(d)+10*u(d)+3*r(d)) ...
                ...
                - 72*u(d).*v(d).*Cw(d).*log(r(d)+w(d)) ...
...                - 72*u(d).*v(d).*Cw(d) ...
                ...
                + 6*v(d).*log(r(d)+u(d)).*(  3.*u(d).*(2*Cu(d)+u(d)) + v2(d) - 3*w(d).*(4.*Cw(d)+w(d)) ) ...
                + 6*v(d).*log(r(d)-u(d)).*( -3.*u(d).*(2*Cu(d)+u(d)) + v2(d) ) ...
                ...
                +  6*log(r(d)+v(d)).*( 2.*u(d).^3                    + 3*Cu(d).*(u2(d)-w2(d)) ) ...
                + 18*log(r(d)-v(d)).*( 2.*u(d).*w(d).*(2*Cw(d)+w(d)) -   Cu(d).*(u2(d)-w2(d)) )...
                ...
                + 24*w2(d).*(3.*Cw(d)+w(d)).*atan(u(d)./w(d)) ...
                + 36*Cw(d).*(u2(d)+w2(d)).*atan(w(d)./u(d)) ...
                +  3*v(d).^3.*Cw(d).*atan(u(d).*w(d)./(v(d).*r(d))) ...
                + 12*w(d).*( w2(d)+3.*Cw(d).*w(d) - 3.*u(d).*(2.*Cu(d)+u(d)) ).*atan(u(d).*v(d)./(w(d).*r(d))) ...
                + 36*u2(d).*Cw(d).*atan((v(d).*w(d))./(u(d).*r(d)))...
                              );
              Ez(d) = 1/12.*(...
                  + 1/3*w(d).^3 ...
...                  + 2.*w(d).*v2(d) ...
                  + r(d).*w(d).*(6.*Cu(d)+u(d)) ...
...                  + 6.*u(d).*w(d).*(2.*Cu(d)+u(d)) ...
                  + 6.*u(d).*w(d).*(2.*Cu(d)+u(d)).*log(r(d)-u(d)) ...
                  - w(d).*( 3.*v2(d) + w2(d) ).*log(r(d)+u(d)) ...
                  - 2.*( 2.*u(d).^3 + 3.*Cu(d).*(u2(d)-v2(d)) ).*log(r(d)+w(d)) ...
                  - 12.*(Cv(d)+v(d)).*(...
                    - u(d).*v(d).*log(r(d)+w(d)) ...
                    + u(d).*w(d).*log(r(d)-v(d)) ...
                    - v(d).*w(d).*log(r(d)+u(d)) ...
                                   )...
                  - 2.*v(d).*(v2(d)-3.*u(d).*(2.*Cu(d)+u(d))).*atan(w(d)./r(d)) ...
                  + 2.*v(d).*(v2(d)+3.*u(d).*(2.*Cu(d)+u(d))).*atan((u(d).*w(d))./(v(d).*r(d))) ...
                  - 6.*(Cv(d)+v(d)).*(...
                    + u2(d).*( atan(w(d)./u(d)) + atan((v(d).*w(d))./(u(d).*r(d))) ) ...
                    + v2(d).*atan((u(d).*w(d))./(v(d).*r(d))) ...
                    + w2(d).*( ...
                        + 2.*atan(u(d)./w(d)) ...
                        + atan(w(d)./u(d)) ...
                        + atan((u(d).*v(d))./(w(d).*r(d))) ...
                             ) ...
                                   )...
                          );
            end
            
            ind_sum = (-1)^(ii+jj+kk+ll+mm+nn);
            Tx = Tx + ind_sum.*Ex;
            Ty = Ty + ind_sum.*Ey;
            Tz = Tz + ind_sum.*Ez;
            
          end
        end
      end
    end
  end
end

torque_zy = bzr1*byr2/(16*pi*pi*1e-7).*[Tx; Ty; Tz];

end